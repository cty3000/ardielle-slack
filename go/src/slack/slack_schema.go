//
// This file generated by rdl 1.5.0
//

package slack

import (
	"log"

	rdl "github.com/ardielle/ardielle-go/rdl"
)

var schema *rdl.Schema

func init() {
	sb := rdl.NewSchemaBuilder("slack")
	sb.Version(1)
	sb.Namespace("tk.cty4500")
	sb.Comment("A slack event API in *RDL*")

	tEvent := rdl.NewStructTypeBuilder("Struct", "Event")
	tEvent.Field("type", "String", false, nil, "")
	tEvent.Field("user", "String", true, nil, "")
	tEvent.Field("deleted_ts", "String", true, nil, "")
	tEvent.Field("subtype", "String", true, nil, "")
	tEvent.Field("hidden", "Bool", true, nil, "")
	tEvent.Field("text", "String", true, nil, "")
	tEvent.Field("channel", "String", false, nil, "")
	tEvent.Field("previous_message", "Struct", true, nil, "")
	tEvent.Field("item", "Struct", true, nil, "")
	tEvent.Field("reaction", "String", true, nil, "")
	tEvent.Field("item_user", "String", true, nil, "")
	tEvent.Field("event_ts", "String", false, nil, "")
	tEvent.Field("ts", "String", false, nil, "")
	sb.AddType(tEvent.Build())

	tChallenge := rdl.NewStructTypeBuilder("Struct", "Challenge")
	tChallenge.Field("token", "String", false, nil, "")
	tChallenge.Field("challenge", "String", false, nil, "")
	tChallenge.Field("type", "String", false, nil, "")
	sb.AddType(tChallenge.Build())

	tRequest := rdl.NewStructTypeBuilder("Struct", "Request")
	tRequest.Comment("The events sent to your Request URL may contain sensitive information associated with the workspaces having approved your Slack app. To ensure that events are being delivered to a server under your direct control, we must verify your ownership by issuing you a challenge request.")
	tRequest.Field("token", "String", false, nil, "")
	tRequest.Field("challenge", "String", true, nil, "")
	tRequest.Field("team_id", "String", true, nil, "")
	tRequest.Field("api_app_id", "String", true, nil, "")
	tRequest.Field("event", "Event", true, nil, "")
	tRequest.Field("type", "String", false, nil, "")
	tRequest.ArrayField("authed_users", "String", true, "")
	tRequest.Field("event_id", "String", true, nil, "")
	tRequest.Field("event_time", "Int32", true, nil, "")
	sb.AddType(tRequest.Build())

	mPostRequest := rdl.NewResourceBuilder("Request", "POST", "/event")
	mPostRequest.Input("request", "Request", false, "", "", false, nil, "The request params")
	mPostRequest.Exception("BAD_REQUEST", "ResourceError", "")
	mPostRequest.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mPostRequest.Build())

	var err error
	schema, err = sb.BuildParanoid()
	if err != nil {
		log.Fatalf("rdl: schema build failed: %s", err)
	}
}

func SlackSchema() *rdl.Schema {
	return schema
}
