//
// This file generated by rdl 1.5.0
//

package slack

import (
	"log"

	rdl "github.com/ardielle/ardielle-go/rdl"
)

var schema *rdl.Schema

func init() {
	sb := rdl.NewSchemaBuilder("slack")
	sb.Version(1)
	sb.Namespace("tk.cty4500")
	sb.Comment("A slack event API in *RDL*")

	tEvent := rdl.NewStructTypeBuilder("Struct", "Event")
	tEvent.Field("type", "String", false, nil, "")
	tEvent.Field("user", "String", true, nil, "")
	tEvent.Field("deleted_ts", "String", true, nil, "")
	tEvent.Field("subtype", "String", true, nil, "")
	tEvent.Field("hidden", "Bool", true, nil, "")
	tEvent.Field("text", "String", true, nil, "")
	tEvent.Field("channel", "String", false, nil, "")
	tEvent.Field("previous_message", "Struct", true, nil, "")
	tEvent.Field("item", "Struct", true, nil, "")
	tEvent.Field("reaction", "String", true, nil, "")
	tEvent.Field("item_user", "String", true, nil, "")
	tEvent.Field("event_ts", "String", false, nil, "")
	tEvent.Field("ts", "String", true, nil, "")
	sb.AddType(tEvent.Build())

	tSlackEvent := rdl.NewStructTypeBuilder("Struct", "SlackEvent")
	tSlackEvent.Comment("The events sent to your Request URL may contain sensitive information associated with the workspaces having approved your Slack app. To ensure that events are being delivered to a server under your direct control, we must verify your ownership by issuing you a challenge request.")
	tSlackEvent.Field("token", "String", false, nil, "")
	tSlackEvent.Field("challenge", "String", true, nil, "")
	tSlackEvent.Field("team_id", "String", true, nil, "")
	tSlackEvent.Field("api_app_id", "String", true, nil, "")
	tSlackEvent.Field("event", "Event", true, nil, "")
	tSlackEvent.Field("type", "String", false, nil, "")
	tSlackEvent.ArrayField("authed_users", "String", true, "")
	tSlackEvent.Field("event_id", "String", true, nil, "")
	tSlackEvent.Field("event_time", "Int32", true, nil, "")
	sb.AddType(tSlackEvent.Build())

	tSlackWebhookURL := rdl.NewAliasTypeBuilder("String", "SlackWebhookURL")
	sb.AddType(tSlackWebhookURL.Build())

	tNgrokInterface := rdl.NewStructTypeBuilder("Struct", "NgrokInterface")
	tNgrokInterface.Field("public_url", "String", true, nil, "")
	sb.AddType(tNgrokInterface.Build())

	tSlackWebhookRequest := rdl.NewStructTypeBuilder("Struct", "SlackWebhookRequest")
	tSlackWebhookRequest.Field("text", "String", false, nil, "")
	sb.AddType(tSlackWebhookRequest.Build())

	tSlackWebhookResponse := rdl.NewAliasTypeBuilder("String", "SlackWebhookResponse")
	sb.AddType(tSlackWebhookResponse.Build())

	mPostSlackEvent := rdl.NewResourceBuilder("SlackEvent", "POST", "/event")
	mPostSlackEvent.Input("request", "SlackEvent", false, "", "", false, nil, "The request params")
	mPostSlackEvent.Exception("BAD_REQUEST", "ResourceError", "")
	mPostSlackEvent.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mPostSlackEvent.Build())

	mGetSlackWebhookURL := rdl.NewResourceBuilder("SlackWebhookURL", "GET", "/services/{T}/{B}/{X}")
	mGetSlackWebhookURL.Input("T", "String", true, "", "", false, nil, "")
	mGetSlackWebhookURL.Input("B", "String", true, "", "", false, nil, "")
	mGetSlackWebhookURL.Input("X", "String", true, "", "", false, nil, "")
	mGetSlackWebhookURL.Exception("BAD_REQUEST", "ResourceError", "")
	mGetSlackWebhookURL.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mGetSlackWebhookURL.Build())

	mGetNgrokInterface := rdl.NewResourceBuilder("NgrokInterface", "GET", "/api/tunnels/command_line")
	mGetNgrokInterface.Exception("BAD_REQUEST", "ResourceError", "")
	mGetNgrokInterface.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mGetNgrokInterface.Build())

	mPostSlackWebhookRequest := rdl.NewResourceBuilder("SlackWebhookResponse", "POST", "/services/{T}/{B}/{X}")
	mPostSlackWebhookRequest.Input("T", "String", true, "", "", false, nil, "")
	mPostSlackWebhookRequest.Input("B", "String", true, "", "", false, nil, "")
	mPostSlackWebhookRequest.Input("X", "String", true, "", "", false, nil, "")
	mPostSlackWebhookRequest.Input("request", "SlackWebhookRequest", false, "", "", false, nil, "")
	mPostSlackWebhookRequest.Exception("BAD_REQUEST", "ResourceError", "")
	mPostSlackWebhookRequest.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mPostSlackWebhookRequest.Build())

	var err error
	schema, err = sb.BuildParanoid()
	if err != nil {
		log.Fatalf("rdl: schema build failed: %s", err)
	}
}

func SlackSchema() *rdl.Schema {
	return schema
}
